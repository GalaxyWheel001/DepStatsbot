"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–ù–∞–∑–∞–¥", –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞,
–¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∑–∞—è–≤–æ–∫, FAQ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
"""
import os
import asyncio
from datetime import datetime
from typing import Dict, Any, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from config import ADMIN_IDS, UPLOAD_DIR, MAX_FILE_SIZE
from database import DatabaseManager, async_session_maker

# Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from google_sheets_integration import sync_application_to_sheets
    GOOGLE_SHEETS_ENABLED = True
except ImportError:
    GOOGLE_SHEETS_ENABLED = False
    logger.warning("Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

from keyboards_enhanced import (
    get_main_menu_keyboard, get_deposit_amount_keyboard,
    get_confirm_data_keyboard, get_admin_keyboard,
    get_retry_keyboard, get_back_button, get_language_keyboard,
    get_faq_keyboard, get_application_details_keyboard,
    get_applications_list_keyboard, get_cancel_application_keyboard,
    get_payment_method_selection_keyboard
)
from localization import get_text, TRANSLATIONS, LANGUAGES

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DepositStates(StatesGroup):
    waiting_for_deposit_choice = State()
    waiting_for_custom_amount = State()
    waiting_for_login = State()
    waiting_for_confirmation = State()
    waiting_for_payment_file = State()

class AdminStates(StatesGroup):
    waiting_for_codes_amount = State()
    waiting_for_codes_file = State()

# –†–æ—É—Ç–µ—Ä
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
user_data: Dict[int, Dict[str, Any]] = {}
user_navigation_history: Dict[int, List[str]] = {}
user_timeouts: Dict[int, asyncio.Task] = {}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é uploads –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs("logs", exist_ok=True)

def add_to_history(user_id: int, state_name: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    if user_id not in user_navigation_history:
        user_navigation_history[user_id] = []
    user_navigation_history[user_id].append(state_name)

def get_previous_state(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    if user_id not in user_navigation_history or len(user_navigation_history[user_id]) < 2:
        return "menu"
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_navigation_history[user_id].pop()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
    return user_navigation_history[user_id].pop() if user_navigation_history[user_id] else "menu"

def clear_history(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    if user_id in user_navigation_history:
        user_navigation_history[user_id] = []

def get_progress_indicator(step: int, total: int = 4) -> str:
    """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    indicators = ["‚óã"] * total
    for i in range(step):
        indicators[i] = "‚óè"
    return " ".join(indicators) + f" ({step}/{total})"

async def cancel_timeout(user_id: int):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_timeouts:
        user_timeouts[user_id].cancel()
        del user_timeouts[user_id]

async def timeout_handler(user_id: int, state: FSMContext, bot, lang: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ (15 –º–∏–Ω—É—Ç)"""
    await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç
    
    try:
        await state.clear()
        if user_id in user_data:
            del user_data[user_id]
        clear_history(user_id)
        
        await bot.send_message(
            user_id,
            get_text("timeout_expired", lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
        
        logger.info(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ timeout_handler: {e}")
    finally:
        if user_id in user_timeouts:
            del user_timeouts[user_id]

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    user_name = message.from_user.full_name or message.from_user.username or f"User{user_id}"
    
    await state.clear()
    await cancel_timeout(user_id)
    clear_history(user_id)
    
    async with async_session_maker() as session:
        is_first = await DatabaseManager.is_first_time(session, user_id)
        
        if is_first:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
            welcome_text = TRANSLATIONS["first_welcome"]["multi"]
            await message.answer(
                welcome_text,
                reply_markup=get_language_keyboard(show_back=False),
                parse_mode="HTML"
            )
        else:
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            lang = await DatabaseManager.get_user_language(session, user_id)
            await message.answer(
                get_text("welcome_message", lang, name=user_name),
                reply_markup=get_main_menu_keyboard(lang)
            )

@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    user_id = message.from_user.id
    
    await state.clear()
    await cancel_timeout(user_id)
    clear_history(user_id)
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    await message.answer(
        get_text("menu_welcome", lang),
        reply_markup=get_main_menu_keyboard(lang)
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    await state.clear()
    await cancel_timeout(user_id)
    clear_history(user_id)
    if user_id in user_data:
        del user_data[user_id]
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    await callback.message.edit_text(
        get_text("menu_welcome", lang),
        reply_markup=get_main_menu_keyboard(lang)
    )

@router.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    previous = get_previous_state(user_id)
    
    if previous == "menu":
        # back_to_menu —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç callback.answer()
        await back_to_menu(callback, state)
    elif previous == "amount_choice":
        await callback.answer()
        await state.set_state(DepositStates.waiting_for_deposit_choice)
        await callback.message.edit_text(
            f"üìç {get_progress_indicator(1)}\n\n" + get_text("choose_amount", lang),
            reply_markup=get_deposit_amount_keyboard(lang)
        )
    elif previous == "login":
        await callback.answer()
        add_to_history(user_id, "amount_choice")
        await state.set_state(DepositStates.waiting_for_login)
        amount = user_data.get(user_id, {}).get("amount", 0)
        await callback.message.edit_text(
            f"üìç {get_progress_indicator(2)}\n\n" + get_text("enter_login", lang, amount=amount)
        )

@router.callback_query(F.data == "menu_deposit")
async def menu_deposit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        can_proceed, error_message = await DatabaseManager.check_user_rate_limit(session, user_id)
        lang = await DatabaseManager.get_user_language(session, user_id)
        
        if not can_proceed:
            await callback.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
            await callback.message.edit_text(
                f"‚ùå {error_message}",
                reply_markup=get_back_button(lang)
            )
            return
    
    await callback.answer()
    
    clear_history(user_id)
    add_to_history(user_id, "menu")
    add_to_history(user_id, "payment_method_choice")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    text = get_text("payment_method_selection", lang)
    
    await callback.message.edit_text(
        text,
        reply_markup=get_payment_method_selection_keyboard(lang),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "payment_method_manual")
async def payment_method_manual(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã - –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    await callback.answer()
    add_to_history(user_id, "amount_choice")
    
    await state.set_state(DepositStates.waiting_for_deposit_choice)
    
    await callback.message.edit_text(
        f"üìç {get_progress_indicator(1)}\n\n" + get_text("choose_amount", lang),
        reply_markup=get_deposit_amount_keyboard(lang)
    )

@router.callback_query(F.data == "payment_method_online")
async def payment_method_online(callback: CallbackQuery):
    """–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ SmartGlocal"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã –∏–∑ payments_integration
    from payments_integration import start_payment_deposit
    await start_payment_deposit(callback)

@router.callback_query(F.data == "menu_applications")
async def menu_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞)"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
        applications = await DatabaseManager.get_user_applications(session, user_id)
        
        if not applications:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç.",
                reply_markup=get_back_button(lang)
            )
            return
        
        await callback.message.edit_text(
            "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_applications_list_keyboard(applications[:10], lang)
        )

@router.callback_query(F.data.startswith("view_app_"))
async def view_application_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    user_id = callback.from_user.id
    app_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
        application = await DatabaseManager.get_application_by_id(session, app_id)
        
        if not application or application.user_id != user_id:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        status_emoji = {
            "pending": "‚è≥",
            "approved": "‚úÖ",
            "rejected": "‚ùå",
            "needs_info": "üí¨"
        }.get(application.status, "‚ùì")
        
        status_name = {
            "pending": "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "approved": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "needs_info": "–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        }.get(application.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        details_text = (
            f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{application.id}</b>\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {application.amount} {application.currency}\n"
            f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {application.login}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}\n"
            f"üïí <b>–°–æ–∑–¥–∞–Ω–∞:</b> {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if application.updated_at and application.updated_at != application.created_at:
            details_text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {application.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if application.admin_comment:
            details_text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞:</b>\n{application.admin_comment}\n"
        
        if application.activation_code and application.activation_code.code_value:
            details_text += f"\nüéüÔ∏è <b>–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> <code>{application.activation_code.code_value}</code>\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            await callback.bot.send_document(
                user_id,
                application.file_id,
                caption="üìé –í–∞—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
        
        await callback.message.edit_text(
            details_text,
            reply_markup=get_application_details_keyboard(application, lang),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("cancel_app_"))
async def cancel_application(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = callback.from_user.id
    app_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
        application = await DatabaseManager.get_application_by_id(session, app_id)
        
        if not application or application.user_id != user_id:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        if application.status != "pending":
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç'", show_alert=True)
            return
        
        # –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ç–≤–µ—á–∞–µ–º
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "cancelled"
        await DatabaseManager.update_application_status(
            session=session,
            application_id=app_id,
            status="cancelled",
            admin_comment="–û—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        
        await DatabaseManager.log_transaction(
            session=session,
            application_id=app_id,
            action="cancelled",
            comment=f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
        )
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    await callback.message.edit_text(
        f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_back_button(lang),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "menu_faq")
async def menu_faq(callback: CallbackQuery):
    """FAQ —Ä–∞–∑–¥–µ–ª"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        
        "<b>1. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç?</b>\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ '–°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç'\n"
        "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –ª–æ–≥–∏–Ω\n"
        "   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
        "   ‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        
        "<b>2. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞?</b>\n"
        "   ‚Ä¢ –û–±—ã—á–Ω–æ 5-30 –º–∏–Ω—É—Ç\n"
        "   ‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫ –¥–æ 2 —á–∞—Å–æ–≤\n\n"
        
        "<b>3. –ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è?</b>\n"
        "   ‚Ä¢ JPG, PNG (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã)\n"
        "   ‚Ä¢ PDF (–¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
        "   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë\n\n"
        
        "<b>4. –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏?</b>\n"
        "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∏–¥–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        "   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
        
        "<b>5. –õ–∏–º–∏—Ç—ã –∑–∞—è–≤–æ–∫?</b>\n"
        "   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞—è–≤–∫–∏ –≤ –¥–µ–Ω—å\n"
        "   ‚Ä¢ 1 –∑–∞—è–≤–∫–∞ –≤ –º–∏–Ω—É—Ç—É\n\n"
        
        "<b>6. –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?</b>\n"
        "   ‚Ä¢ –î–∞, –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç'\n"
        "   ‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –≤ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –∏ '–û—Ç–º–µ–Ω–∏—Ç—å'\n\n"
    )
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=get_faq_keyboard(lang),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "menu_support")
async def menu_support(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    support_text = (
        "üí¨ <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "üìû <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>\n\n"
        "‚Ä¢ Telegram: @support_username\n"
        "‚Ä¢ Email: support@example.com\n"
        "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
        "‚ö° <b>–°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:</b> 15 –º–∏–Ω—É—Ç\n\n"
        "üí° <b>–ü–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ FAQ\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/status - –ú–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
    )
    
    await callback.message.edit_text(
        support_text,
        reply_markup=get_back_button(lang),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "menu_language")
async def menu_language(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    await callback.message.edit_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ÿ≤ÿ®ÿßŸÜ ŸÖŸÜÿ™ÿÆÿ® ⁄©ÿ±€å⁄∫:",
        reply_markup=get_language_keyboard()
    )

@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name or callback.from_user.username or f"User{user_id}"
    lang = callback.data.split("_")[1]
    
    # –û—Ç–≤–µ—á–∞–µ–º –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    
    async with async_session_maker() as session:
        is_first = await DatabaseManager.is_first_time(session, user_id)
        await DatabaseManager.set_user_language(session, user_id, lang)
        
        if is_first:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –æ—Ç–º–µ—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º
            await DatabaseManager.mark_not_first_time(session, user_id)
            
            welcome_text = get_text("welcome_message", lang, name=user_name)
            await callback.message.edit_text(
                welcome_text,
                reply_markup=get_main_menu_keyboard(lang)
            )
            await callback.answer(f"‚úÖ {LANGUAGES[lang]}")
        else:
            # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await callback.message.edit_text(
                get_text("menu_welcome", lang),
                reply_markup=get_main_menu_keyboard(lang)
            )
            await callback.answer(f"‚úÖ {get_text('menu_change_language', lang)}")

@router.callback_query(F.data.startswith("amount_"))
async def process_amount_selection(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = callback.from_user.id
    amount_str = callback.data.split("_")[1]
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    if amount_str == "custom":
        add_to_history(user_id, "custom_amount")
        await state.set_state(DepositStates.waiting_for_custom_amount)
        await callback.message.edit_text(
            f"üìç {get_progress_indicator(1)}\n\n" + get_text("enter_custom_amount", lang),
            reply_markup=get_back_button(lang, show_back=True)
        )
    else:
        try:
            amount = float(amount_str)
            user_data[user_id] = {"amount": amount}
            add_to_history(user_id, "login")
            await state.set_state(DepositStates.waiting_for_login)
            
            await callback.message.edit_text(
                f"üìç {get_progress_indicator(2)}\n\n" + get_text("enter_login", lang, amount=amount)
            )
        except ValueError:
            await callback.answer(get_text("error_invalid_amount", lang), show_alert=True)

@router.message(StateFilter(DepositStates.waiting_for_custom_amount))
async def process_custom_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    try:
        amount = float(message.text.strip().replace(",", "."))
        
        if amount <= 0:
            await message.answer(get_text("error_invalid_amount", lang))
            return
        
        if amount > 10000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 USD")
            return
        
        user_data[user_id] = {"amount": amount}
        add_to_history(user_id, "login")
        await state.set_state(DepositStates.waiting_for_login)
        
        await message.answer(
            f"üìç {get_progress_indicator(2)}\n\n" + get_text("enter_login", lang, amount=amount)
        )
        
    except ValueError:
        await message.answer(get_text("error_invalid_amount", lang))

@router.message(StateFilter(DepositStates.waiting_for_login))
async def process_login_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
    user_id = message.from_user.id
    login = message.text.strip()
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    if len(login) < 3:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return
    
    if len(login) > 50:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    user_data[user_id]["login"] = login
    add_to_history(user_id, "confirmation")
    await state.set_state(DepositStates.waiting_for_confirmation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await message.answer(
        f"üìç {get_progress_indicator(3)}\n\n" + 
        get_text("confirm_data", lang,
                amount=user_data[user_id]["amount"],
                login=login),
        reply_markup=get_confirm_data_keyboard(lang)
    )

@router.callback_query(F.data == "confirm_yes")
async def confirm_data_yes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    add_to_history(user_id, "upload")
    await state.set_state(DepositStates.waiting_for_payment_file)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç 15 –º–∏–Ω—É—Ç
    timeout_task = asyncio.create_task(
        timeout_handler(user_id, state, callback.bot, lang)
    )
    user_timeouts[user_id] = timeout_task
    
    await callback.message.edit_text(
        f"üìç {get_progress_indicator(4)}\n\n" + get_text("upload_file", lang)
    )

@router.callback_query(F.data == "confirm_change")
async def confirm_data_change(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã"""
    user_id = callback.from_user.id
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    if user_id in user_data:
        del user_data[user_id]
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    clear_history(user_id)
    add_to_history(user_id, "menu")
    add_to_history(user_id, "amount_choice")
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    await state.set_state(DepositStates.waiting_for_deposit_choice)
    
    await callback.message.edit_text(
        f"üìç {get_progress_indicator(1)}\n\n" + get_text("choose_amount", lang),
        reply_markup=get_deposit_amount_keyboard(lang)
    )

@router.message(StateFilter(DepositStates.waiting_for_payment_file))
async def process_payment_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –¥–ª—è –∑–∞—è–≤–∫–∏")
    
    await cancel_timeout(user_id)
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file_to_download = None
    file_name = None
    
    if message.document:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}: {message.document.file_name}, —Ä–∞–∑–º–µ—Ä: {message.document.file_size}")
        
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer(get_text("error_file_too_large", lang))
            return
        
        file_to_download = message.document
        file_name = message.document.file_name
    elif message.photo:
        largest_photo = max(message.photo, key=lambda x: x.file_size)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id}, —Ä–∞–∑–º–µ—Ä: {largest_photo.file_size}")
        
        if largest_photo.file_size > MAX_FILE_SIZE:
            await message.answer(get_text("error_file_too_large", lang))
            return
        
        file_to_download = largest_photo
        file_name = f"photo_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
        await message.answer(get_text("error_invalid_file", lang))
        return
    
    try:
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(UPLOAD_DIR, exist_ok=True)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {UPLOAD_DIR} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        file_path = os.path.join(UPLOAD_DIR, file_name)
        logger.info(f"–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {file_path}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è aiogram 3.x
        await message.bot.download(
            file=file_to_download,
            destination=file_path
        )
        
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ user_data")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_keyboard(lang)
            )
            await state.clear()
            return
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        async with async_session_maker() as session:
            application = await DatabaseManager.create_application(
                session=session,
                user_id=user_id,
                user_name=message.from_user.full_name or message.from_user.username or f"User{user_id}",
                login=user_data[user_id]["login"],
                amount=user_data[user_id]["amount"],
                file_id=file_to_download.file_id
            )
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application.id} —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            await DatabaseManager.log_transaction(
                session=session,
                application_id=application.id,
                action="created",
                comment=f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
            await DatabaseManager.update_user_rate_limit(session, user_id)
            
            lang = await DatabaseManager.get_user_language(session, user_id)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if GOOGLE_SHEETS_ENABLED:
            try:
                await sync_application_to_sheets(application, is_new=True)
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application.id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Google Sheets")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –∑–∞—è–≤–∫–µ #{application.id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins(message.bot, application, file_to_download.file_id)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data:
            del user_data[user_id]
        clear_history(user_id)
        
        await state.clear()
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await message.answer(
            get_text("application_created", lang,
                    app_id=application.id,
                    amount=application.amount,
                    login=application.login),
            reply_markup=get_main_menu_keyboard(lang)
        )
        
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.\n\n–û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç\n‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞",
            reply_markup=get_main_menu_keyboard(lang)
        )

async def notify_admins(bot, application, file_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, application.user_id)
    
    notification_text = get_text("admin_new_application", lang,
                                app_id=application.id,
                                user_name=application.user_name,
                                user_id=application.user_id,
                                amount=application.amount,
                                login=application.login,
                                time=application.created_at.strftime('%d.%m.%Y %H:%M'))
    
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            msg = await bot.send_message(
                admin_id,
                notification_text,
                reply_markup=get_admin_keyboard(application.id, lang),
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if file_id:
                try:
                    await bot.send_document(admin_id, file_id)
                    logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        await bot.send_photo(admin_id, file_id)
                        logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    except Exception as e2:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e2}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@router.callback_query(F.data.startswith("admin_"))
async def process_admin_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with async_session_maker() as session:
        is_admin = await DatabaseManager.is_admin(session, callback.from_user.id)
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ config.ADMIN_IDS (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    if not is_admin and callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    
    parts = callback.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–æ–π (–∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç admin_action_id)
    if len(parts) < 3:
        # –≠—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π callback, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ admin_enhanced.py)
        return
    
    action = parts[1]
    try:
        application_id = int(parts[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback", show_alert=True)
        return
    
    async with async_session_maker() as session:
        application = await DatabaseManager.get_application_by_id(session, application_id)
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        user_lang = await DatabaseManager.get_user_language(session, application.user_id)
        
        if action == "approve":
            await callback.answer("‚úÖ –û–¥–æ–±—Ä—è—é –∑–∞—è–≤–∫—É...")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            code = await DatabaseManager.get_activation_code(session, float(application.amount))
            
            if not code:
                await callback.message.edit_text(
                    f"‚ö†Ô∏è –ö–æ–¥—ã –¥–ª—è {application.amount} USD –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
                )
                return
            
            await DatabaseManager.update_application_status(
                session=session,
                application_id=application_id,
                status="approved",
                admin_id=callback.from_user.id,
                activation_code_id=code.id
            )
            
            await DatabaseManager.mark_code_as_used(session, code.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            await DatabaseManager.log_transaction(
                session=session,
                application_id=application_id,
                action="approved",
                admin_id=callback.from_user.id,
                comment=f"–í—ã–¥–∞–Ω –∫–æ–¥ {code.code_value}"
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
            if GOOGLE_SHEETS_ENABLED:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    updated_app = await DatabaseManager.get_application_by_id(session, application_id)
                    await sync_application_to_sheets(updated_app, is_new=False)
                    logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} (–æ–¥–æ–±—Ä–µ–Ω–∞) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Google Sheets")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.bot.send_message(
                    application.user_id,
                    get_text("status_approved", user_lang,
                            app_id=application_id,
                            code=code.code_value),
                    reply_markup=get_main_menu_keyboard(user_lang)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"üéüÔ∏è –ö–æ–¥: {code.code_value}"
            )
            
        elif action == "reject":
            await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω—è—é –∑–∞—è–≤–∫—É...")
            
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            await DatabaseManager.update_application_status(
                session=session,
                application_id=application_id,
                status="rejected",
                admin_id=callback.from_user.id,
                admin_comment="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            
            await DatabaseManager.log_transaction(
                session=session,
                application_id=application_id,
                action="rejected",
                admin_id=callback.from_user.id
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets
            if GOOGLE_SHEETS_ENABLED:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    updated_app = await DatabaseManager.get_application_by_id(session, application_id)
                    await sync_application_to_sheets(updated_app, is_new=False)
                    logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞) —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Google Sheets")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            try:
                await callback.bot.send_message(
                    application.user_id,
                    get_text("status_rejected", user_lang,
                            app_id=application_id,
                            reason="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"),
                    reply_markup=get_retry_keyboard(user_lang)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
        elif action == "history":
            # –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–∫–∏
            await callback.answer("üìã –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...")
            
            history = await DatabaseManager.get_transaction_history(session, application_id)
            
            history_text = f"üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–∫–∏ #{application_id}:\n\n"
            
            for transaction in history:
                history_text += (
                    f"‚Ä¢ {transaction.action.upper()}\n"
                    f"  –í—Ä–µ–º—è: {transaction.timestamp.strftime('%d.%m %H:%M')}\n"
                )
                if transaction.admin_id:
                    history_text += f"  –ê–¥–º–∏–Ω: {transaction.admin_id}\n"
                if transaction.comment:
                    history_text += f"  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {transaction.comment}\n"
                history_text += "\n"
            
            await callback.answer(history_text[:4000], show_alert=True)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

@router.callback_query(F.data == "retry_yes")
async def retry_application(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    # callback.answer() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ menu_deposit
    await menu_deposit(callback, state)

@router.callback_query(F.data == "retry_no")
async def retry_no(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    # callback.answer() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ back_to_menu
    await back_to_menu(callback, state)

@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
        applications = await DatabaseManager.get_user_applications(session, user_id)
        
        if not applications:
            await message.answer(
                "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=get_main_menu_keyboard(lang)
            )
            return
        
        for app in applications[:5]:
            if app.status == "approved" and app.activation_code:
                text = get_text("status_approved", lang,
                              app_id=app.id,
                              code=app.activation_code.code_value)
            elif app.status == "rejected":
                text = get_text("status_rejected", lang,
                              app_id=app.id,
                              reason=app.admin_comment or "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            else:
                text = get_text("status_pending", lang, app_id=app.id)
            
            await message.answer(text)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/status - –ú–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        "üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n"
        "4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
        "5Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        
        "‚ö° <b>–õ–∏–º–∏—Ç—ã:</b>\n"
        "‚Ä¢ 3 –∑–∞—è–≤–∫–∏ –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ 1 –∑–∞—è–≤–∫–∞ –≤ –º–∏–Ω—É—Ç—É\n\n"
        
        "‚ùì –î–ª—è FAQ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é"
    )
    
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    async with async_session_maker() as session:
        stats = await DatabaseManager.get_stats(session, days=1)
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{stats['total']}</b>\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: <b>{stats['confirmed']}</b>\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{stats['rejected']}</b>\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: <b>{stats['pending']}</b>\n\n"
        f"üéüÔ∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–¥–æ–≤:</b>\n"
    )
    
    for amount, count in stats['codes_remaining'].items():
        emoji = "üî¥" if count < 3 else "üü°" if count < 5 else "üü¢"
        stats_text += f"{emoji} ${amount} USD ‚Äî <b>{count}</b> —à—Ç.\n"
    
    await message.answer(stats_text, parse_mode="HTML")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await cancel_timeout(user_id)
    clear_history(user_id)
    if user_id in user_data:
        del user_data[user_id]
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard(lang)
    )

