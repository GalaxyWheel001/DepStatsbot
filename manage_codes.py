"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
"""
import asyncio
import csv
from decimal import Decimal
from database import async_session_maker, ActivationCode
from sqlalchemy import select, func

async def list_codes():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–¥—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å—É–º–º–∞–º"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–¥–∞–º
        query = select(
            ActivationCode.amount,
            func.count(ActivationCode.id).label('total'),
            func.count(ActivationCode.id).filter(ActivationCode.is_used == False).label('available'),
            func.count(ActivationCode.id).filter(ActivationCode.is_used == True).label('used')
        ).group_by(ActivationCode.amount).order_by(ActivationCode.amount)
        
        result = await session.execute(query)
        stats = result.all()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
        print("-" * 50)
        
        for stat in stats:
            print(f"üí∞ {stat.amount} USD:")
            print(f"   –í—Å–µ–≥–æ: {stat.total}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {stat.available}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stat.used}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã
        unused_query = select(ActivationCode).where(
            ActivationCode.is_used == False
        ).order_by(ActivationCode.amount, ActivationCode.id)
        
        unused_result = await session.execute(unused_query)
        unused_codes = unused_result.scalars().all()
        
        if unused_codes:
            print("üéüÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:")
            print("-" * 50)
            current_amount = None
            for code in unused_codes:
                if code.amount != current_amount:
                    current_amount = code.amount
                    print(f"\nüí∞ {code.amount} USD:")
                print(f"   {code.code_value}")
        else:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤")

async def add_codes_from_csv(filename: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        codes_added = 0
        async with async_session_maker() as session:
            with open(filename, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                
                for row in reader:
                    code_value = row.get('code_value', '').strip()
                    amount_str = row.get('amount', '').strip()
                    
                    if not code_value or not amount_str:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {row}")
                        continue
                    
                    try:
                        amount = Decimal(amount_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
                        existing_query = select(ActivationCode).where(
                            ActivationCode.code_value == code_value
                        )
                        existing_result = await session.execute(existing_query)
                        existing_code = existing_result.scalar_one_or_none()
                        
                        if existing_code:
                            print(f"‚ö†Ô∏è –ö–æ–¥ {code_value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                            continue
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
                        code = ActivationCode(
                            code_value=code_value,
                            amount=amount
                        )
                        session.add(code)
                        codes_added += 1
                        
                    except ValueError as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row}: {e}")
                        continue
                
                await session.commit()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {codes_added} –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
                
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤: {e}")

async def add_single_code(code_value: str, amount: float):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∫–æ–¥"""
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–¥
        existing_query = select(ActivationCode).where(
            ActivationCode.code_value == code_value
        )
        existing_result = await session.execute(existing_query)
        existing_code = existing_result.scalar_one_or_none()
        
        if existing_code:
            print(f"‚ùå –ö–æ–¥ {code_value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        code = ActivationCode(
            code_value=code_value,
            amount=Decimal(str(amount))
        )
        session.add(code)
        await session.commit()
        
        print(f"‚úÖ –ö–æ–¥ {code_value} –¥–ª—è —Å—É–º–º—ã {amount} USD –¥–æ–±–∞–≤–ª–µ–Ω")

async def delete_code(code_value: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–¥"""
    async with async_session_maker() as session:
        query = select(ActivationCode).where(ActivationCode.code_value == code_value)
        result = await session.execute(query)
        code = result.scalar_one_or_none()
        
        if not code:
            print(f"‚ùå –ö–æ–¥ {code_value} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if code.is_used:
            print(f"‚ö†Ô∏è –ö–æ–¥ {code_value} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return
        
        await session.delete(code)
        await session.commit()
        
        print(f"‚úÖ –ö–æ–¥ {code_value} —É–¥–∞–ª–µ–Ω")

async def export_codes_to_csv(filename: str):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–æ–≤ –≤ CSV —Ñ–∞–π–ª"""
    async with async_session_maker() as session:
        query = select(ActivationCode).order_by(ActivationCode.amount, ActivationCode.id)
        result = await session.execute(query)
        codes = result.scalars().all()
        
        with open(filename, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['code_value', 'amount', 'is_used', 'issued_at'])
            
            for code in codes:
                writer.writerow([
                    code.code_value,
                    float(code.amount),
                    code.is_used,
                    code.issued_at.isoformat() if code.issued_at else ''
                ])
        
        print(f"‚úÖ –ö–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª {filename}")

def print_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    print("""
üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

–ö–æ–º–∞–Ω–¥—ã:
  list                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–¥—ã
  add <code> <amount>     - –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∫–æ–¥
  add-csv <filename>      - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥—ã –∏–∑ CSV —Ñ–∞–π–ª–∞
  delete <code>           - –£–¥–∞–ª–∏—Ç—å –∫–æ–¥
  export <filename>       - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã –≤ CSV
  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python manage_codes.py list
  python manage_codes.py add "NEW-CODE-123" 50
  python manage_codes.py add-csv codes.csv
  python manage_codes.py delete "OLD-CODE-456"
  python manage_codes.py export backup.csv

–§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞:
  code_value,amount
  CODE-001,10.00
  CODE-002,25.00
  CODE-003,50.00
""")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == "list":
        await list_codes()
    
    elif command == "add" and len(sys.argv) == 4:
        code_value = sys.argv[2]
        try:
            amount = float(sys.argv[3])
            await add_single_code(code_value, amount)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
    
    elif command == "add-csv" and len(sys.argv) == 3:
        filename = sys.argv[2]
        await add_codes_from_csv(filename)
    
    elif command == "delete" and len(sys.argv) == 3:
        code_value = sys.argv[2]
        await delete_code(code_value)
    
    elif command == "export" and len(sys.argv) == 3:
        filename = sys.argv[2]
        await export_codes_to_csv(filename)
    
    elif command == "help":
        print_help()
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        print_help()

if __name__ == "__main__":
    asyncio.run(main())
