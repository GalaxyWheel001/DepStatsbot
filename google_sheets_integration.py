"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
"""
import asyncio
from datetime import datetime
from typing import List, Optional
from loguru import logger

try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    logger.warning("Google Sheets –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gspread google-auth")

from database import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_NAME = "Bot Deposits Data"
CREDENTIALS_FILE = "credentials.json"  # –§–∞–π–ª —Å credentials –æ—Ç Google Cloud

class GoogleSheetsExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        self.client = None
        self.spreadsheet = None
        self.worksheet = None
        
    def authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API"""
        if not GOOGLE_SHEETS_AVAILABLE:
            raise ImportError("Google Sheets –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        try:
            scope = [
                'https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = Credentials.from_service_account_file(
                CREDENTIALS_FILE, 
                scopes=scope
            )
            
            self.client = gspread.authorize(creds)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets")
            return True
            
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
    
    def get_or_create_spreadsheet(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            self.spreadsheet = self.client.open(SPREADSHEET_NAME)
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {SPREADSHEET_NAME}")
        except gspread.SpreadsheetNotFound:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            self.spreadsheet = self.client.create(SPREADSHEET_NAME)
            self.spreadsheet.share('', perm_type='anyone', role='reader')
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {SPREADSHEET_NAME}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º
        try:
            self.worksheet = self.spreadsheet.worksheet("–ó–∞—è–≤–∫–∏")
        except gspread.WorksheetNotFound:
            self.worksheet = self.spreadsheet.add_worksheet(
                title="–ó–∞—è–≤–∫–∏", 
                rows=1000, 
                cols=15
            )
        
        return self.spreadsheet.url
    
    def setup_headers(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        headers = [
            "ID",
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "User ID",
            "–õ–æ–≥–∏–Ω",
            "–°—É–º–º–∞",
            "–í–∞–ª—é—Ç–∞",
            "–°—Ç–∞—Ç—É—Å",
            "–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã",
            "–û–±—Ä–∞–±–æ—Ç–∞–ª",
            "–ê–¥–º–∏–Ω ID",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω)",
            "File ID",
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª"
        ]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.worksheet.update('A1:Q1', [headers])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.worksheet.format('A1:Q1', {
            "backgroundColor": {
                "red": 0.2,
                "green": 0.6,
                "blue": 1.0
            },
            "textFormat": {
                "bold": True,
                "foregroundColor": {
                    "red": 1.0,
                    "green": 1.0,
                    "blue": 1.0
                }
            },
            "horizontalAlignment": "CENTER"
        })
        
        # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        self.worksheet.freeze(rows=1)
        
        logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def export_applications(self, applications: List[Application]) -> int:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ Google Sheets"""
        if not applications:
            logger.warning("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return 0
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.worksheet.resize(rows=1)
        self.worksheet.resize(rows=len(applications) + 1)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not self.worksheet.get('A1'):
            self.setup_headers()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        rows = []
        for app in applications:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_time = ""
            if app.updated_at and app.updated_at != app.created_at:
                delta = app.updated_at - app.created_at
                processing_time = int(delta.total_seconds() / 60)
            
            # –°—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            status_ru = {
                "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
                "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞",
                "needs_info": "üí¨ –¢—Ä–µ–±—É–µ—Ç –∏–Ω—Ñ–æ"
            }.get(app.status, app.status)
            
            # –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            code_value = ""
            if app.activation_code:
                code_value = app.activation_code.code_value
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ Telegram
            file_url = f"https://api.telegram.org/file/bot<TOKEN>/{app.file_id}" if app.file_id else ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            payment_method = ""
            if app.file_id == "payment":
                payment_method = "üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
            elif app.file_id:
                payment_method = "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
            else:
                payment_method = "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª
            processed_by = ""
            if app.admin_id == 0:
                processed_by = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (SmartGlocal)"
            elif app.admin_id:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                processed_by = f"üë§ –ê–¥–º–∏–Ω ID: {app.admin_id}"
            else:
                processed_by = "‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
            
            row = [
                app.id,
                app.created_at.strftime('%d.%m.%Y %H:%M'),
                app.user_name or "",
                app.user_id,
                app.login,
                float(app.amount),
                app.currency,
                status_ru,
                payment_method,
                processed_by,
                app.admin_id if app.admin_id else "",
                app.admin_comment or "",
                code_value,
                app.updated_at.strftime('%d.%m.%Y %H:%M') if app.updated_at else "",
                processing_time,
                app.file_id or "",
                file_url
            ]
            rows.append(row)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–±—ã—Å—Ç—Ä–µ–µ)
        cell_range = f'A2:Q{len(rows) + 1}'
        self.worksheet.update(cell_range, rows)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.format_worksheet()
        
        logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞—è–≤–æ–∫")
        return len(rows)
    
    def format_worksheet(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ê–≤—Ç–æ—Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        self.worksheet.columns_auto_resize(0, 16)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        # –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ID
        self.worksheet.format('A:A', {"horizontalAlignment": "CENTER"})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
        self.worksheet.format('F:F', {
            "numberFormat": {
                "type": "CURRENCY",
                "pattern": "$#,##0.00"
            }
        })
    
    def add_application(self, application: Application):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞—è–≤–∫—É (–¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        values = self.worksheet.get_all_values()
        next_row = len(values) + 1
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processing_time = ""
        if application.updated_at and application.updated_at != application.created_at:
            delta = application.updated_at - application.created_at
            processing_time = int(delta.total_seconds() / 60)
        
        status_ru = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(application.status, application.status)
        
        code_value = ""
        if application.activation_code:
            code_value = application.activation_code.code_value
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        payment_method = ""
        if application.file_id == "payment":
            payment_method = "üí≥ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        elif application.file_id:
            payment_method = "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"
        else:
            payment_method = "‚ùì –ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª
        processed_by = ""
        if application.admin_id == 0:
            processed_by = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (SmartGlocal)"
        elif application.admin_id:
            processed_by = f"üë§ –ê–¥–º–∏–Ω ID: {application.admin_id}"
        else:
            processed_by = "‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
        
        row = [
            application.id,
            application.created_at.strftime('%d.%m.%Y %H:%M'),
            application.user_name or "",
            application.user_id,
            application.login,
            float(application.amount),
            application.currency,
            status_ru,
            payment_method,
            processed_by,
            application.admin_id if application.admin_id else "",
            application.admin_comment or "",
            code_value,
            application.updated_at.strftime('%d.%m.%Y %H:%M') if application.updated_at else "",
            processing_time,
            application.file_id or "",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        self.worksheet.append_row(row)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{application.id} –≤ Google Sheets")
    
    def update_application(self, application: Application):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É"""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π
        cell = self.worksheet.find(str(application.id))
        
        if not cell:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            self.add_application(application)
            return
        
        row_number = cell.row
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        processing_time = ""
        if application.updated_at and application.updated_at != application.created_at:
            delta = application.updated_at - application.created_at
            processing_time = int(delta.total_seconds() / 60)
        
        status_ru = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(application.status, application.status)
        
        code_value = ""
        if application.activation_code:
            code_value = application.activation_code.code_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —è—á–µ–π–∫–∏
        updates = [
            {
                'range': f'H{row_number}',  # –°—Ç–∞—Ç—É—Å
                'values': [[status_ru]]
            },
            {
                'range': f'I{row_number}',  # –ê–¥–º–∏–Ω ID
                'values': [[application.admin_id or ""]]
            },
            {
                'range': f'J{row_number}',  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                'values': [[application.admin_comment or ""]]
            },
            {
                'range': f'K{row_number}',  # –ö–æ–¥
                'values': [[code_value]]
            },
            {
                'range': f'L{row_number}',  # –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                'values': [[application.updated_at.strftime('%d.%m.%Y %H:%M') if application.updated_at else ""]]
            },
            {
                'range': f'M{row_number}',  # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                'values': [[processing_time]]
            }
        ]
        
        self.worksheet.batch_update(updates)
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{application.id} –≤ Google Sheets")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
_exporter: Optional[GoogleSheetsExporter] = None

def get_exporter() -> GoogleSheetsExporter:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
    global _exporter
    
    if _exporter is None:
        _exporter = GoogleSheetsExporter()
        _exporter.authenticate()
        _exporter.get_or_create_spreadsheet()
    
    return _exporter


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
async def export_applications_to_sheets(applications: List[Application]) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫"""
    loop = asyncio.get_event_loop()
    
    def _export():
        exporter = get_exporter()
        exporter.export_applications(applications)
        return exporter.spreadsheet.url
    
    return await loop.run_in_executor(None, _export)

async def sync_application_to_sheets(application: Application, is_new: bool = False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∑–∞—è–≤–∫—É"""
    if not GOOGLE_SHEETS_AVAILABLE:
        return
    
    loop = asyncio.get_event_loop()
    
    def _sync():
        try:
            exporter = get_exporter()
            if is_new:
                exporter.add_application(application)
            else:
                exporter.update_application(application)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
    
    await loop.run_in_executor(None, _sync)

async def get_spreadsheet_url() -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å URL —Ç–∞–±–ª–∏—Ü—ã"""
    if not GOOGLE_SHEETS_AVAILABLE:
        return None
    
    loop = asyncio.get_event_loop()
    
    def _get_url():
        try:
            exporter = get_exporter()
            return exporter.spreadsheet.url
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")
            return None
    
    return await loop.run_in_executor(None, _get_url)


# –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async def auto_sync_application(application: Application, is_new: bool = False):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –≤ database.py –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    """
    try:
        await sync_application_to_sheets(application, is_new)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

