"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–µ—Ä–µ–¥ git push!
"""
import os
import re
from pathlib import Path

# –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
DANGEROUS_PATTERNS = [
    (r'"private_key":\s*"-----BEGIN PRIVATE KEY-----', "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á Google"),
    (r'BOT_TOKEN\s*=\s*["\'][0-9]+:[A-Za-z0-9_-]{35}', "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram"),
    (r'[0-9]{10,}:[A-Z]+:[A-Za-z0-9_-]+', "Payment Provider Token"),
    (r'"client_email":\s*"[^@]+@[^"]+\.iam\.gserviceaccount\.com"', "Service Account Email (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç)"),
]

# –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
FORBIDDEN_FILES = [
    'credentials.json',
    'token.json',
    'token.pickle',
    '.env',
]

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—ç—Ç–∏ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ)
ALLOWED_FILES = [
    'example-credentials.json',
    'env.example',
    '.env.example',
]

def check_file_content(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        found_secrets = []
        for pattern, description in DANGEROUS_PATTERNS:
            if re.search(pattern, content):
                found_secrets.append((file_path, description))
        
        return found_secrets
    except:
        return []

def main():
    print("\n" + "="*70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –£–¢–ï–ß–ö–ò –°–ï–ö–†–ï–¢–û–í")
    print("="*70 + "\n")
    
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for forbidden_file in FORBIDDEN_FILES:
        if os.path.exists(forbidden_file) and forbidden_file not in ALLOWED_FILES:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –≤ .gitignore
            try:
                with open('.gitignore', 'r') as f:
                    gitignore = f.read()
                if forbidden_file in gitignore:
                    print(f"   ‚ö†Ô∏è  {forbidden_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–æ –≤ .gitignore ‚úÖ)")
                else:
                    errors.append(f"‚ùå {forbidden_file} –ù–ï –í .gitignore!")
            except:
                errors.append(f"‚ùå {forbidden_file} –Ω–∞–π–¥–µ–Ω –∏ .gitignore –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
    print("\n2Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ .py –∏ .json —Ñ–∞–π–ª–æ–≤...")
    
    python_files = list(Path('.').glob('*.py'))
    json_files = list(Path('.').glob('*.json'))
    
    for file_path in python_files + json_files:
        if file_path.name in ALLOWED_FILES:
            continue
        
        secrets = check_file_content(file_path)
        if secrets:
            for fp, desc in secrets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ example —Ñ–∞–π–ª
                if 'example' not in str(fp).lower():
                    errors.append(f"‚ùå {fp}: –Ω–∞–π–¥–µ–Ω {desc}")
                else:
                    warnings.append(f"‚ö†Ô∏è  {fp}: –Ω–∞–π–¥–µ–Ω {desc} (–Ω–æ —ç—Ç–æ example —Ñ–∞–π–ª)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
    try:
        with open('.gitignore', 'r') as f:
            gitignore = f.read()
        
        required_entries = ['credentials.json', '.env', 'token.json']
        missing = []
        
        for entry in required_entries:
            if entry not in gitignore:
                missing.append(entry)
        
        if missing:
            errors.append(f"‚ùå .gitignore –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: {', '.join(missing)}")
        else:
            print("   ‚úÖ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    except:
        errors.append("‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*70 + "\n")
    
    if errors:
        print("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:\n")
        for error in errors:
            print(f"   {error}")
        print()
    
    if warnings:
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n")
        for warning in warnings:
            print(f"   {warning}")
        print()
    
    if not errors and not warnings:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –°–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print("\nüí° –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–ª–∞—Ç—å git push")
    elif not errors:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã")
    else:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("\nüö´ –ù–ï –î–ï–õ–ê–ô–¢–ï git push –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
        print("\nüí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞:")
        print("   python check_secrets.py")
    
    print("\n" + "="*70 + "\n")
    
    return 0 if not errors else 1

if __name__ == "__main__":
    import sys
    sys.exit(main())

