"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
"""
import sys
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(
    sys.stdout,
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
    level="INFO"
)

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    
    try:
        import gspread
        logger.info("‚úÖ gspread —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.error("‚ùå gspread –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install gspread")
        return False
    
    try:
        from google.oauth2.service_account import Credentials
        logger.info("‚úÖ google-auth —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.error("‚ùå google-auth –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-auth")
        return False
    
    return True

def test_credentials_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è credentials.json"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials.json...")
    
    import os
    if not os.path.exists("credentials.json"):
        logger.error("‚ùå –§–∞–π–ª credentials.json –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        logger.error("üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ GOOGLE_SHEETS_SETUP.md –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
        return False
    
    logger.info("‚úÖ –§–∞–π–ª credentials.json –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    try:
        import json
        with open("credentials.json", "r") as f:
            creds = json.load(f)
        
        required_fields = ["type", "project_id", "private_key", "client_email"]
        for field in required_fields:
            if field not in creds:
                logger.error(f"‚ùå –í credentials.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                return False
        
        logger.info(f"‚úÖ Service Account Email: {creds['client_email']}")
        logger.info(f"‚úÖ Project ID: {creds['project_id']}")
        
    except json.JSONDecodeError:
        logger.error("‚ùå credentials.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials.json: {e}")
        return False
    
    return True

def test_authentication():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets API...")
    
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        client = gspread.authorize(creds)
        
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets")
        return client
        
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        logger.error("")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   1. Google Sheets API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ Google Cloud Console")
        logger.error("   2. Google Drive API –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        logger.error("   3. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials.json")
        logger.error("")
        logger.error("üìñ –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: GOOGLE_SHEETS_SETUP.md")
        return None

def test_create_spreadsheet(client):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    logger.info("üîç –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...")
    
    try:
        test_name = f"Test Bot Sheet {datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.create(test_name)
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º URL
        url = spreadsheet.url
        logger.info(f"‚úÖ URL —Ç–∞–±–ª–∏—Ü—ã: {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet = spreadsheet.sheet1
        headers = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å"]
        worksheet.update('A1:D1', [headers])
        logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            [1, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞", datetime.now().strftime('%d.%m.%Y %H:%M'), "‚úÖ –£—Å–ø–µ—à–Ω–æ"],
            [2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏", datetime.now().strftime('%d.%m.%Y %H:%M'), "‚úÖ OK"]
        ]
        worksheet.update('A2:D3', test_data)
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –î–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—É–±–ª–∏—á–Ω–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        spreadsheet.share('', perm_type='anyone', role='reader')
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ")
        
        logger.info("")
        logger.info("=" * 60)
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.info("=" * 60)
        logger.info("")
        logger.info(f"üìä –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: {url}")
        logger.info("")
        logger.info("üí° –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –∏–∑ Google Drive")
        logger.info("üí° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        logger.error("")
        logger.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("   1. Google Sheets API –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        logger.error("   2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É Service Account")
        logger.error("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–≤–æ—Ç–∞–º–∏ API")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    logger.info("=" * 60)
    logger.info("")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    if not test_imports():
        logger.error("")
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
        logger.error("   pip install -r requirements.txt")
        return False
    
    logger.info("")
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials.json
    if not test_credentials_file():
        return False
    
    logger.info("")
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    client = test_authentication()
    if not client:
        return False
    
    logger.info("")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if not test_create_spreadsheet(client):
        return False
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            logger.error("")
            logger.error("=" * 60)
            logger.error("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            logger.error("=" * 60)
            logger.error("")
            logger.error("üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: GOOGLE_SHEETS_SETUP.md")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


