"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (—á–∞—Å—Ç—å 2)
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞, –ª–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤
"""
import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from database import DatabaseManager, async_session_maker
from admin_enhanced import DepositAmountsStates, check_superadmin_rights

router = Router()

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–û–ú–ò–ù–ê–õ–ê–ú–ò –î–ï–ü–û–ó–ò–¢–ê ====================

@router.callback_query(F.data == "admin_manage_amounts")
async def manage_deposit_amounts(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    async with async_session_maker() as session:
        current_amounts = await DatabaseManager.get_deposit_amounts(session)
    
    amounts_str = ", ".join([f"${a}" for a in current_amounts])
    
    text = (
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–æ–º–∏–Ω–∞–ª—ã:</b>\n{amounts_str}\n\n"
        "–≠—Ç–∏ —Å—É–º–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç.\n\n"
        "üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–∏–Ω–∞–ª—ã", callback_data="amounts_edit")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "amounts_edit")
async def edit_amounts_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(DepositAmountsStates.waiting_for_new_amounts)
    
    text = (
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>10, 25, 50, 100, 200</code>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç–æ–π\n"
        "‚Ä¢ –ú–∏–Ω–∏–º—É–º 1 –Ω–æ–º–∏–Ω–∞–ª\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –Ω–æ–º–∏–Ω–∞–ª–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_amounts")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(DepositAmountsStates.waiting_for_new_amounts))
async def edit_amounts_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–º–∏–Ω–∞–ª–æ–≤"""
    user_id = message.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–∏–Ω–∞–ª—ã
        amounts_str = message.text.strip()
        amounts = [int(float(x.strip().replace("$", ""))) for x in amounts_str.split(",")]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if len(amounts) < 1:
            await message.answer("‚ùå –ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 –Ω–æ–º–∏–Ω–∞–ª.")
            return
        
        if len(amounts) > 10:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –Ω–æ–º–∏–Ω–∞–ª–æ–≤.")
            return
        
        if any(a <= 0 for a in amounts):
            await message.answer("‚ùå –í—Å–µ –Ω–æ–º–∏–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")
            return
        
        if any(a > 100000 for a in amounts):
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª: 100,000 USD")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session_maker() as session:
            await DatabaseManager.set_deposit_amounts(session, amounts, user_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session,
                user_id,
                "change_deposit_amounts",
                details=f"–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–æ–º–∏–Ω–∞–ª—ã –Ω–∞: {amounts}"
            )
        
        amounts_display = ", ".join([f"${a}" for a in amounts])
        await message.answer(
            f"‚úÖ <b>–ù–æ–º–∏–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"üí∞ <b>–ù–æ–≤—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã:</b>\n{amounts_display}\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.",
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# ==================== –õ–û–ì–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================

@router.callback_query(F.data == "admin_security_logs")
async def security_logs_menu(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        logs = await DatabaseManager.get_admin_logs(session, limit=20, days=7)
    
    if not logs:
        text = "üîê <b>–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    text = f"üîê <b>–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(logs)} –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞ 7 –¥–Ω–µ–π):\n\n"
    
    action_names = {
        "add_admin": "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω",
        "remove_admin": "‚ûñ –£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω",
        "add_code": "üéüÔ∏è –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥",
        "delete_code": "üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ–¥",
        "import_codes": "üìÑ –ò–º–ø–æ—Ä—Ç –∫–æ–¥–æ–≤",
        "change_deposit_amounts": "üí∞ –ò–∑–º–µ–Ω–µ–Ω—ã –Ω–æ–º–∏–Ω–∞–ª—ã",
        "change_language_settings": "üåê –ò–∑–º–µ–Ω–µ–Ω—ã —è–∑—ã–∫–∏"
    }
    
    for log in logs:
        action_display = action_names.get(log.action, log.action)
        timestamp = log.timestamp.strftime("%d.%m %H:%M")
        
        text += f"‚Ä¢ {timestamp} | {action_display}\n"
        text += f"  –ê–¥–º–∏–Ω: {log.admin_id}"
        
        if log.target_id:
            text += f" | –¶–µ–ª—å: {log.target_id}"
        
        if log.details:
            details_short = log.details[:50] + "..." if len(log.details) > 50 else log.details
            text += f"\n  {details_short}"
        
        text += "\n\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_security_logs"),
            InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="security_logs_month")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "security_logs_month")
async def security_logs_month(callback: CallbackQuery):
    """–õ–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    async with async_session_maker() as session:
        logs = await DatabaseManager.get_admin_logs(session, limit=50, days=30)
    
    if not logs:
        text = "üîê <b>–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_security_logs")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    actions_count = {}
    for log in logs:
        actions_count[log.action] = actions_count.get(log.action, 0) + 1
    
    text = (
        f"üîê <b>–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (30 –¥–Ω–µ–π)</b>\n\n"
        f"üìä <b>–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:</b> {len(logs)}\n\n"
        f"<b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
    )
    
    action_names = {
        "add_admin": "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤",
        "remove_admin": "‚ûñ –£–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤",
        "add_code": "üéüÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤",
        "delete_code": "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–æ–¥–æ–≤",
        "import_codes": "üìÑ –ò–º–ø–æ—Ä—Ç–æ–≤ –∫–æ–¥–æ–≤",
        "change_deposit_amounts": "üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–æ–º–∏–Ω–∞–ª–æ–≤"
    }
    
    for action, count in sorted(actions_count.items(), key=lambda x: x[1], reverse=True):
        action_display = action_names.get(action, action)
        text += f"‚Ä¢ {action_display}: {count}\n"
    
    text += f"\nüí° –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(logs)} –∑–∞–ø–∏—Å–µ–π."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_security_logs")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ====================

@router.callback_query(F.data == "admin_payment_settings")
async def payment_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider_token = await DatabaseManager.get_setting(session, "payment_provider_token")
        currency = await DatabaseManager.get_setting(session, "payment_currency") or "USD"
        commission = await DatabaseManager.get_setting(session, "payment_commission") or "0"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞
    token_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if provider_token else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    text = (
        "üí≥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "<b>SmartGlocal (Telegram Payments)</b>\n\n"
        f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> {token_status}\n"
        f"üí± <b>–í–∞–ª—é—Ç–∞:</b> {currency}\n"
        f"üíº <b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission}%\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
        "‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa, MasterCard)\n"
        "‚Ä¢ üü¢ Google Pay\n"
        "‚Ä¢ üçé Apple Pay\n\n"
        "üí° <b>–û SmartGlocal:</b>\n"
        "SmartGlocal - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä Telegram –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π. "
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n\n"
    )
    
    if not provider_token:
        text += (
            "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://smart-glocal.com\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ Provider Token –¥–ª—è Telegram\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
            "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–∞–π–ª–µ SMARTGLOCAL_SETUP.md"
        )
    else:
        text += "‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏—ë–º—É –ø–ª–∞—Ç–µ–∂–µ–π!"
    
    buttons = []
    
    if provider_token:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="payment_change_token")
        ])
        buttons.append([
            InlineKeyboardButton(text="üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="payment_change_currency"),
            InlineKeyboardButton(text="üíº –ö–æ–º–∏—Å—Å–∏—è", callback_data="payment_change_commission")
        ])
        buttons.append([
            InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", callback_data="payment_test")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="payment_remove_token")
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="payment_add_token")
        ])
    
    buttons.append([
        InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="payment_instructions")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


class PaymentSettingsStates(StatesGroup):
    waiting_for_token = State()
    waiting_for_currency = State()
    waiting_for_commission = State()


@router.callback_query(F.data == "payment_add_token")
async def payment_add_token_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(PaymentSettingsStates.waiting_for_token)
    
    text = (
        "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Provider Token</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Provider Token –æ—Ç SmartGlocal.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ @BotFather\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä\n"
        "‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n\n"
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://smart-glocal.com\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á–∏ API\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ @BotFather ‚Üí Payments\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ SmartGlocal –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_payment_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.message(StateFilter(PaymentSettingsStates.waiting_for_token))
async def payment_add_token_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    user_id = message.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    token = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    if len(token) < 20:
        await message.answer(
            "‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    try:
        async with async_session_maker() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            await DatabaseManager.set_setting(session, "payment_provider_token", token)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session=session,
                admin_id=user_id,
                action="add_payment_token",
                details=f"–î–æ–±–∞–≤–ª–µ–Ω Provider Token –¥–ª—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–¥–ª–∏–Ω–∞: {len(token)})"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await message.delete()
        except:
            pass
        
        await message.answer(
            "‚úÖ <b>Provider Token —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            "–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ SmartGlocal –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –æ–Ω–ª–∞–π–Ω.\n\n"
            "üîí –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_settings")]
            ])
        )
        
        await state.clear()
        
        logger.info(f"SuperAdmin {user_id} –¥–æ–±–∞–≤–∏–ª Provider Token")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")]
            ])
        )
        await state.clear()


@router.callback_query(F.data == "payment_change_token")
async def payment_change_token(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é)"""
    await payment_add_token_start(callback, state)


@router.callback_query(F.data == "payment_remove_token")
async def payment_remove_token(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    text = (
        "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ Provider Token</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω?\n\n"
        "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —á–µ–∫–∏\n"
        "‚Ä¢ –¢–æ–∫–µ–Ω –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–Ω–æ–≤–æ\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="payment_remove_token_confirm"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_payment_settings")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "payment_remove_token_confirm")
async def payment_remove_token_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    try:
        async with async_session_maker() as session:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            await DatabaseManager.set_setting(session, "payment_provider_token", "")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session=session,
                admin_id=user_id,
                action="remove_payment_token",
                details="–£–¥–∞–ª—ë–Ω Provider Token –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
            )
        
        await callback.answer("‚úÖ –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await payment_settings(callback)
        
        logger.info(f"SuperAdmin {user_id} —É–¥–∞–ª–∏–ª Provider Token")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "payment_test")
async def payment_test(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    text = (
        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂</b>\n\n"
        "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/test_payment</code>\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π invoice —Å —Å—É–º–º–æ–π $10.\n\n"
        "üìù <b>–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:</b>\n"
        "‚Ä¢ 4242 4242 4242 4242 - —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n"
        "‚Ä¢ 4000 0000 0000 0002 - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
        "–õ—é–±–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º –∏ –ª—é–±–æ–π CVC.\n\n"
        "‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "payment_instructions")
async def payment_instructions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    await callback.answer()
    
    text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SmartGlocal</b>\n\n"
        "<b>–®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://smart-glocal.com\n"
        "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
        "<b>–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π API</b>\n"
        "‚Ä¢ –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª API\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ Public Key –∏ Secret Key\n\n"
        "<b>–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ Telegram</b>\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å @BotFather\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /mybots\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n"
        "‚Ä¢ Payments ‚Üí SmartGlocal\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏ API\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ Provider Token\n\n"
        "<b>–®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç</b>\n"
        "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Provider Token\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ —ç—Ç—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç—ë–∂\n\n"
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
        "üìÑ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: SMARTGLOCAL_SETUP.md"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å SmartGlocal", url="https://smart-glocal.com")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –Ø–ó–´–ö–û–í ====================

@router.callback_query(F.data == "admin_manage_languages")
async def manage_languages(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    user_id = callback.from_user.id
    
    if not await check_superadmin_rights(user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    from localization import LANGUAGES
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        enabled_langs_json = await DatabaseManager.get_setting(session, "enabled_languages")
        
        if enabled_langs_json:
            try:
                enabled_langs = json.loads(enabled_langs_json)
            except:
                enabled_langs = list(LANGUAGES.keys())
        else:
            enabled_langs = list(LANGUAGES.keys())
    
    text = (
        "üåê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–æ–≤</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"
    )
    
    for lang_code, lang_name in LANGUAGES.items():
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if lang_code in enabled_langs else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        text += f"‚Ä¢ {lang_name} ({lang_code}): {status}\n"
    
    text += (
        "\nüí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n"
        "–í—Å–µ —è–∑—ã–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

