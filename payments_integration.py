"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Telegram Payments —Å SmartGlocal
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: Card-to-Card, Google Pay, Apple Pay
"""
import asyncio
from typing import Optional, Dict, Any, List
from datetime import datetime
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, LabeledPrice, 
    PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from loguru import logger

from database import DatabaseManager, async_session_maker
from config import ADMIN_IDS

router = Router()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ====================

class PaymentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # SmartGlocal Provider Token (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://smart-glocal.com)
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    PROVIDER_TOKEN = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ .env
    
    # –í–∞–ª—é—Ç–∞ (ISO 4217)
    CURRENCY = "USD"  # USD, EUR, RUB –∏ —Ç.–¥.
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    PAYMENT_METHODS = {
        "card": "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
        "google_pay": "üü¢ Google Pay",
        "apple_pay": "üçé Apple Pay"
    }
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    MIN_AMOUNT = 10
    MAX_AMOUNT = 10000
    
    # –ö–æ–º–∏—Å—Å–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    COMMISSION_PERCENT = 0  # 0% - –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, 3.5 –¥–ª—è 3.5%
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–µ–∫–∞
    PAYMENT_DESCRIPTION = "–î–µ–ø–æ–∑–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É"
    
    @classmethod
    def get_provider_token(cls) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if cls.PROVIDER_TOKEN:
            return cls.PROVIDER_TOKEN
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        token = os.getenv("PAYMENT_PROVIDER_TOKEN")
        if token:
            cls.PROVIDER_TOKEN = token
            return token
        
        return None
    
    @classmethod
    async def get_token_from_db(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with async_session_maker() as session:
            token = await DatabaseManager.get_setting(session, "payment_provider_token")
            if token:
                cls.PROVIDER_TOKEN = token
                return token
        return None
    
    @classmethod
    def is_configured(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
        return cls.get_provider_token() is not None
    
    @classmethod
    def calculate_amount(cls, base_amount: float) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∏, —Ü–µ–Ω—Ç—ã)
        """
        if cls.COMMISSION_PERCENT > 0:
            total = base_amount * (1 + cls.COMMISSION_PERCENT / 100)
        else:
            total = base_amount
        
        # Telegram —Ç—Ä–µ–±—É–µ—Ç —Å—É–º–º—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (—Ü–µ–Ω—Ç—ã –¥–ª—è USD)
        return int(total * 100)
    
    @classmethod
    def format_amount(cls, amount_cents: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        amount_dollars = amount_cents / 100
        return f"${amount_dollars:.2f}"


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def get_payment_method_keyboard(lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
            callback_data="payment_method_card"
        )],
        [InlineKeyboardButton(
            text="üü¢ Google Pay",
            callback_data="payment_method_google_pay"
        )],
        [InlineKeyboardButton(
            text="üçé Apple Pay",
            callback_data="payment_method_apple_pay"
        )],
        [InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_confirm_keyboard(amount: float, lang: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [InlineKeyboardButton(
            text=f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å ${amount}",
            pay=True  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="back_to_menu"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ====================

@router.callback_query(F.data == "menu_deposit_payment")
async def start_payment_deposit(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–µ–ø–æ–∑–∏—Ç–∞"""
    user_id = callback.from_user.id
    
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if not PaymentConfig.is_configured():
        await PaymentConfig.get_token_from_db()
    
    if not PaymentConfig.is_configured():
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ —Å–µ–π—á–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞ "
            "–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        return
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        can_proceed, error_message = await DatabaseManager.check_user_rate_limit(session, user_id)
        lang = await DatabaseManager.get_user_language(session, user_id)
        
        if not can_proceed:
            await callback.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", show_alert=True)
            await callback.message.edit_text(
                f"‚ùå {error_message}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã
        amounts = await DatabaseManager.get_deposit_amounts(session)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    text = (
        "üí≥ <b>–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç:\n"
        "‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
        "‚Ä¢ üü¢ Google Pay\n"
        "‚Ä¢ üçé Apple Pay\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:"
    )
    
    buttons = []
    for amount in amounts:
        buttons.append([InlineKeyboardButton(
            text=f"üí∞ ${amount}",
            callback_data=f"payment_amount_{amount}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_menu"
    )])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("payment_amount_"))
async def select_payment_amount(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    user_id = callback.from_user.id
    amount = float(callback.data.split("_")[2])
    
    await callback.answer()
    
    async with async_session_maker() as session:
        lang = await DatabaseManager.get_user_language(session, user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É
    amount_cents = PaymentConfig.calculate_amount(amount)
    final_amount = amount_cents / 100
    
    commission_text = ""
    if PaymentConfig.COMMISSION_PERCENT > 0:
        commission = amount * PaymentConfig.COMMISSION_PERCENT / 100
        commission_text = f"\nüíº –ö–æ–º–∏—Å—Å–∏—è: ${commission:.2f} ({PaymentConfig.COMMISSION_PERCENT}%)"
    
    text = (
        "üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${amount}\n"
        f"{commission_text}"
        f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${final_amount:.2f}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    try:
        provider_token = PaymentConfig.get_provider_token()
        
        # –°–æ–∑–¥–∞–µ–º invoice
        prices = [LabeledPrice(label=f"–î–µ–ø–æ–∑–∏—Ç ${amount}", amount=amount_cents)]
        
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
        await callback.message.answer_invoice(
            title=f"–î–µ–ø–æ–∑–∏—Ç ${amount}",
            description=f"{PaymentConfig.PAYMENT_DESCRIPTION}\n\n–°—É–º–º–∞: ${amount}",
            payload=f"deposit_{user_id}_{amount}_{int(datetime.utcnow().timestamp())}",
            provider_token=provider_token,
            currency=PaymentConfig.CURRENCY,
            prices=prices,
            start_parameter="deposit",
            reply_markup=get_payment_confirm_keyboard(final_amount, lang)
        )
        
        logger.info(f"Invoice –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ —Å—É–º–º—É ${amount}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è invoice: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {str(e)[:50]}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.
    """
    user_id = pre_checkout_query.from_user.id
    
    logger.info(f"Pre-checkout –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"Payload: {pre_checkout_query.invoice_payload}")
    logger.info(f"–°—É–º–º–∞: {pre_checkout_query.total_amount} {pre_checkout_query.currency}")
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_parts = pre_checkout_query.invoice_payload.split("_")
        if len(payload_parts) >= 3:
            deposit_type = payload_parts[0]
            payload_user_id = int(payload_parts[1])
            amount = float(payload_parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if payload_user_id != user_id:
                await pre_checkout_query.answer(
                    ok=False,
                    error_message="–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            async with async_session_maker() as session:
                can_proceed, error_message = await DatabaseManager.check_user_rate_limit(session, user_id)
                
                if not can_proceed:
                    await pre_checkout_query.answer(
                        ok=False,
                        error_message=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: {error_message}"
                    )
                    return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–ª–∞—Ç—É
        await pre_checkout_query.answer(ok=True)
        logger.info(f"Pre-checkout –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre-checkout: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
    """
    user_id = message.from_user.id
    payment_info = message.successful_payment
    
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"–°—É–º–º–∞: {payment_info.total_amount} {payment_info.currency}")
    logger.info(f"Payload: {payment_info.invoice_payload}")
    logger.info(f"Provider payment charge ID: {payment_info.provider_payment_charge_id}")
    logger.info(f"Telegram payment charge ID: {payment_info.telegram_payment_charge_id}")
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload_parts = payment_info.invoice_payload.split("_")
        amount = float(payload_parts[2]) if len(payload_parts) >= 3 else 0
        
        async with async_session_maker() as session:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º
            application = await DatabaseManager.create_application(
                session=session,
                user_id=user_id,
                user_name=message.from_user.full_name or message.from_user.username or f"User{user_id}",
                login=f"payment_{payment_info.telegram_payment_charge_id[:10]}",
                amount=amount,
                file_id="payment"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
            )
            
            # –°—Ä–∞–∑—É –æ–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É (–æ–ø–ª–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞)
            code = await DatabaseManager.get_activation_code(session, amount)
            
            if code:
                await DatabaseManager.update_application_status(
                    session=session,
                    application_id=application.id,
                    status="approved",
                    admin_id=0,  # 0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                    activation_code_id=code.id,
                    admin_comment=f"–û–ø–ª–∞—á–µ–Ω–æ –æ–Ω–ª–∞–π–Ω. TG Charge ID: {payment_info.telegram_payment_charge_id}"
                )
                
                await DatabaseManager.mark_code_as_used(session, code.id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await DatabaseManager.log_transaction(
                    session=session,
                    application_id=application.id,
                    action="approved",
                    admin_id=0,
                    comment=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã. Provider ID: {payment_info.provider_payment_charge_id}"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)
                await DatabaseManager.log_admin_action(
                    session=session,
                    admin_id=0,
                    action="auto_approve_payment",
                    target_id=application.id,
                    details=f"–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{application.id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ${amount}. –ö–æ–¥: {code.code_value}"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await DatabaseManager.update_user_rate_limit(session, user_id)
                
                lang = await DatabaseManager.get_user_language(session, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                success_text = (
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: ${amount}\n"
                    f"üéüÔ∏è <b>–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n"
                    f"<code>{code.code_value}</code>\n\n"
                    f"üìã –ó–∞—è–≤–∫–∞ #{application.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ"
                )
                
                await message.answer(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–µ
                await notify_admins_payment(message.bot, application, payment_info)
                
            else:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ - —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
                await DatabaseManager.log_transaction(
                    session=session,
                    application_id=application.id,
                    action="created",
                    comment=f"–û–ø–ª–∞—á–µ–Ω–æ –æ–Ω–ª–∞–π–Ω, –Ω–æ –Ω–µ—Ç –∫–æ–¥–æ–≤. Provider ID: {payment_info.provider_payment_charge_id}"
                )
                
                lang = await DatabaseManager.get_user_language(session, user_id)
                
                await message.answer(
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: ${amount}\n"
                    f"üìã –ó–∞—è–≤–∫–∞ #{application.id} —Å–æ–∑–¥–∞–Ω–∞.\n\n"
                    "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ",
                    parse_mode="HTML",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ (—Å—Ä–æ—á–Ω–æ - –Ω—É–∂–Ω—ã –∫–æ–¥—ã!)
                await notify_admins_payment(message.bot, application, payment_info, urgent=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_info.telegram_payment_charge_id}\n\n"
            "–ú—ã —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML"
        )


async def notify_admins_payment(bot, application, payment_info, urgent: bool = False):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    urgent_marker = "üö® –°–†–û–ß–ù–û - –ù–ï–¢ –ö–û–î–û–í! " if urgent else ""
    
    text = (
        f"{urgent_marker}<b>üí≥ –ù–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞!</b>\n\n"
        f"üìã –ó–∞—è–≤–∫–∞: #{application.id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application.user_name}\n"
        f"üÜî User ID: <code>{application.user_id}</code>\n"
        f"üí∞ –°—É–º–º–∞: ${application.amount}\n"
        f"üí≥ –ú–µ—Ç–æ–¥: –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (SmartGlocal)\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∞' if not urgent else '–û–∂–∏–¥–∞–µ—Ç (–Ω–µ—Ç –∫–æ–¥–æ–≤!)'}\n\n"
        f"üîë Provider Charge ID:\n<code>{payment_info.provider_payment_charge_id}</code>\n"
        f"üîë Telegram Charge ID:\n<code>{payment_info.telegram_payment_charge_id}</code>\n\n"
        f"üïê –í—Ä–µ–º—è: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')} UTC"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# ==================== –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–¢–ï–ñ ====================

@router.message(Command("test_payment"))
async def test_payment(message: Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if not PaymentConfig.is_configured():
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PAYMENT_PROVIDER_TOKEN –≤ .env –∏–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
        )
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
    amount = 10
    amount_cents = PaymentConfig.calculate_amount(amount)
    
    try:
        await message.answer_invoice(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            payload=f"test_{user_id}_{int(datetime.utcnow().timestamp())}",
            provider_token=PaymentConfig.get_provider_token(),
            currency=PaymentConfig.CURRENCY,
            prices=[LabeledPrice(label="–¢–µ—Å—Ç", amount=amount_cents)],
            start_parameter="test"
        )
        
        await message.answer(
            "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π invoice –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n"
            "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:\n"
            "‚Ä¢ 4242 4242 4242 4242 (—É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞)\n"
            "‚Ä¢ 4000 0000 0000 0002 (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)\n\n"
            "–õ—é–±–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º –∏ –ª—é–±–æ–π CVC"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:\n{str(e)}")

