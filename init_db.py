"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
from decimal import Decimal
from database import init_database, async_session_maker, ActivationCode

async def add_test_codes():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    test_codes = [
        # –ö–æ–¥—ã –¥–ª—è 10 USD
        {"code_value": "ACT10-001", "amount": Decimal("10.00")},
        {"code_value": "ACT10-002", "amount": Decimal("10.00")},
        {"code_value": "ACT10-003", "amount": Decimal("10.00")},
        {"code_value": "ACT10-004", "amount": Decimal("10.00")},
        {"code_value": "ACT10-005", "amount": Decimal("10.00")},
        
        # –ö–æ–¥—ã –¥–ª—è 25 USD
        {"code_value": "ACT25-001", "amount": Decimal("25.00")},
        {"code_value": "ACT25-002", "amount": Decimal("25.00")},
        {"code_value": "ACT25-003", "amount": Decimal("25.00")},
        {"code_value": "ACT25-004", "amount": Decimal("25.00")},
        {"code_value": "ACT25-005", "amount": Decimal("25.00")},
        
        # –ö–æ–¥—ã –¥–ª—è 50 USD
        {"code_value": "ACT50-001", "amount": Decimal("50.00")},
        {"code_value": "ACT50-002", "amount": Decimal("50.00")},
        {"code_value": "ACT50-003", "amount": Decimal("50.00")},
        {"code_value": "ACT50-004", "amount": Decimal("50.00")},
        {"code_value": "ACT50-005", "amount": Decimal("50.00")},
        
        # –ö–æ–¥—ã –¥–ª—è 100 USD
        {"code_value": "ACT100-001", "amount": Decimal("100.00")},
        {"code_value": "ACT100-002", "amount": Decimal("100.00")},
        {"code_value": "ACT100-003", "amount": Decimal("100.00")},
        {"code_value": "ACT100-004", "amount": Decimal("100.00")},
        {"code_value": "ACT100-005", "amount": Decimal("100.00")},
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º
        {"code_value": "CUSTOM-150-001", "amount": Decimal("150.00")},
        {"code_value": "CUSTOM-150-002", "amount": Decimal("150.00")},
        {"code_value": "CUSTOM-200-001", "amount": Decimal("200.00")},
        {"code_value": "CUSTOM-200-002", "amount": Decimal("200.00")},
        {"code_value": "CUSTOM-500-001", "amount": Decimal("500.00")},
    ]
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–¥—ã
        from sqlalchemy import select
        result = await session.execute(select(ActivationCode))
        existing_codes = result.scalars().all()
        
        if existing_codes:
            print(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {len(existing_codes)} –∫–æ–¥–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
        for code_data in test_codes:
            code = ActivationCode(**code_data)
            session.add(code)
        
        await session.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_codes)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await init_database()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
    await add_test_codes()
    
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("‚Ä¢ /start - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–æ–∑–∏—Ç–∞")
    print("‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫")
    print("‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞")
    print("‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")

if __name__ == "__main__":
    asyncio.run(main())
