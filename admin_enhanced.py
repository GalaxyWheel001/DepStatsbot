"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –ø–æ–∏—Å–∫–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""
from datetime import datetime, timedelta
from typing import Optional, List
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from config import ADMIN_IDS
from database import DatabaseManager, async_session_maker, Application

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
admin_filters = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
class AdminManagementStates(StatesGroup):
    waiting_for_admin_id_to_add = State()
    waiting_for_admin_id_to_remove = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
class CodesManagementStates(StatesGroup):
    waiting_for_code_to_add = State()
    waiting_for_amount_for_code = State()
    waiting_for_code_id_to_delete = State()
    waiting_for_csv_file = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–∏–Ω–∞–ª–∞–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
class DepositAmountsStates(StatesGroup):
    waiting_for_new_amounts = State()

# ==================== HELPER –§–£–ù–ö–¶–ò–ò ====================

async def check_admin_rights(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ config.ADMIN_IDS (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    if user_id in ADMIN_IDS:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session_maker() as session:
        return await DatabaseManager.is_admin(session, user_id)

async def check_superadmin_rights(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    async with async_session_maker() as session:
        return await DatabaseManager.is_superadmin(session, user_id)

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all"),
            InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—Ç", callback_data="admin_pending")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="admin_approved"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_rejected")
        ],
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_search"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets", callback_data="admin_export_sheets")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
        ]
    ])
    return keyboard

def get_application_admin_keyboard(app_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{app_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{app_id}")
        ],
        [
            InlineKeyboardButton(text="üí¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ", callback_data=f"admin_info_{app_id}"),
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{app_id}")
        ],
        [
            InlineKeyboardButton(text="üìé –§–∞–π–ª", callback_data=f"admin_file_{app_id}"),
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞", callback_data=f"admin_user_{app_id}")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_pending")
        ]
    ])
    return keyboard

def get_filter_keyboard(current_filter: str = "all") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_filter == 'today' else ''} –°–µ–≥–æ–¥–Ω—è",
                callback_data="filter_today"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_filter == 'week' else ''} –ù–µ–¥–µ–ª—è",
                callback_data="filter_week"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_filter == 'month' else ''} –ú–µ—Å—è—Ü",
                callback_data="filter_month"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if current_filter == 'all' else ''} –í—Å–µ",
                callback_data="filter_all"
            )
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])
    return keyboard

def format_application(app: Application, detailed: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ"""
    status_emoji = {
        "pending": "‚è≥",
        "approved": "‚úÖ",
        "rejected": "‚ùå",
        "cancelled": "üö´",
        "needs_info": "üí¨"
    }.get(app.status, "‚ùì")
    
    status_name = {
        "pending": "–û–∂–∏–¥–∞–µ—Ç",
        "approved": "–û–¥–æ–±—Ä–µ–Ω–∞",
        "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–∞",
        "needs_info": "–¢—Ä–µ–±—É–µ—Ç –∏–Ω—Ñ–æ"
    }.get(app.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{app.id}</b>\n\n"
    
    if detailed:
        text += (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {app.user_name}\n"
            f"üÜî <b>User ID:</b> <code>{app.user_id}</code>\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {app.amount} {app.currency}\n"
            f"üîë <b>–õ–æ–≥–∏–Ω:</b> {app.login}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {app.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if app.updated_at and app.updated_at != app.created_at:
            text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {app.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if app.admin_id:
            text += f"üë®‚Äçüíº <b>–û–±—Ä–∞–±–æ—Ç–∞–ª –∞–¥–º–∏–Ω:</b> {app.admin_id}\n"
        
        if app.admin_comment:
            text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {app.admin_comment}\n"
        
        if app.activation_code:
            text += f"üéüÔ∏è <b>–ö–æ–¥:</b> <code>{app.activation_code.code_value}</code>\n"
        
        # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        if app.status == "pending":
            waiting_time = datetime.utcnow() - app.created_at
            hours = int(waiting_time.total_seconds() // 3600)
            minutes = int((waiting_time.total_seconds() % 3600) // 60)
            text += f"\n‚è±Ô∏è <b>–û–∂–∏–¥–∞–µ—Ç:</b> {hours}—á {minutes}–º–∏–Ω\n"
    else:
        # –ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞
        text = (
            f"{status_emoji} <b>#{app.id}</b> | "
            f"{app.amount} {app.currency} | "
            f"{app.user_name} | "
            f"{app.created_at.strftime('%d.%m %H:%M')}"
        )
    
    return text

@router.message(Command("admin"))
async def cmd_admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not await check_admin_rights(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    async with async_session_maker() as session:
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await DatabaseManager.get_stats(session, days=1)
        
        pending_count = stats['pending']
        today_count = stats['total']
        
        text = (
            "üëë <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
            f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {today_count}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{pending_count}</b>\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['confirmed']}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n\n"
            f"üéüÔ∏è <b>–ö–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n"
        )
        
        for amount, count in stats['codes_remaining'].items():
            emoji = "üî¥" if count < 3 else "üü°" if count < 5 else "üü¢"
            text += f"{emoji} ${amount} USD ‚Äî {count} —à—Ç.\n"
        
        text += "\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(text, reply_markup=get_admin_panel_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    await callback.answer()
    await cmd_admin_panel(callback.message)

@router.callback_query(F.data == "admin_pending")
async def show_pending_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        from sqlalchemy import select
        query = select(Application).where(
            Application.status == "pending"
        ).order_by(Application.created_at)
        
        result = await session.execute(query)
        applications = result.scalars().all()
        
        if not applications:
            await callback.message.edit_text(
                "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n\n‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            return
        
        text = f"‚è≥ <b>–ó–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ ({len(applications)}):</b>\n\n"
        
        buttons = []
        for app in applications[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            waiting_time = datetime.utcnow() - app.created_at
            hours = int(waiting_time.total_seconds() // 3600)
            minutes = int((waiting_time.total_seconds() % 3600) // 60)
            
            button_text = f"‚è≥ #{app.id} | ${app.amount} | {app.user_name} | {hours}—á {minutes}–º"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"admin_view_{app.id}"
            )])
        
        if len(applications) > 10:
            text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(applications)}</i>\n\n"
        
        buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_pending"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith("admin_view_"))
async def view_application_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[2])
    
    async with async_session_maker() as session:
        application = await DatabaseManager.get_application_by_id(session, app_id)
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        text = format_application(application, detailed=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            await callback.bot.send_document(
                callback.from_user.id,
                application.file_id,
                caption=f"üìé –§–∞–π–ª –∫ –∑–∞—è–≤–∫–µ #{app_id}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        
        await callback.message.edit_text(
            text,
            reply_markup=get_application_admin_keyboard(app_id),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "admin_stats")
async def show_detailed_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        stats_today = await DatabaseManager.get_stats(session, days=1)
        stats_week = await DatabaseManager.get_stats(session, days=7)
        stats_month = await DatabaseManager.get_stats(session, days=30)
        
        text = (
            "üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            
            "<b>üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats_today['total']}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats_today['confirmed']} ({stats_today['confirmed']*100//max(stats_today['total'],1)}%)\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats_today['rejected']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats_today['pending']}\n\n"
            
            "<b>üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats_week['total']}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats_week['confirmed']} ({stats_week['confirmed']*100//max(stats_week['total'],1)}%)\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats_week['rejected']}\n\n"
            
            "<b>üìÖ –ó–∞ –º–µ—Å—è—Ü:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats_month['total']}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats_month['confirmed']} ({stats_month['confirmed']*100//max(stats_month['total'],1)}%)\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats_month['rejected']}\n\n"
            
            "<b>üéüÔ∏è –û—Å—Ç–∞—Ç–æ–∫ –∫–æ–¥–æ–≤:</b>\n"
        )
        
        for amount, count in stats_today['codes_remaining'].items():
            emoji = "üî¥" if count < 3 else "üü°" if count < 5 else "üü¢"
            text += f"{emoji} ${amount} USD ‚Äî <b>{count}</b> —à—Ç.\n"
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from sqlalchemy import select, func
        query = select(func.avg(
            func.julianday(Application.updated_at) - func.julianday(Application.created_at)
        )).where(
            Application.status.in_(["approved", "rejected"]),
            Application.updated_at.isnot(None),
            Application.created_at >= datetime.utcnow() - timedelta(days=7)
        )
        result = await session.execute(query)
        avg_time_days = result.scalar()
        
        if avg_time_days:
            avg_time_minutes = int(avg_time_days * 24 * 60)
            hours = avg_time_minutes // 60
            minutes = avg_time_minutes % 60
            text += f"\n‚è±Ô∏è <b>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {hours}—á {minutes}–º–∏–Ω\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_sheets"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("filter_"))
async def apply_filter(callback: CallbackQuery):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    filter_type = callback.data.split("_")[1]
    admin_filters[callback.from_user.id] = filter_type
    
    await callback.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä '{filter_type}' –ø—Ä–∏–º–µ–Ω–µ–Ω")
    await show_pending_applications(callback)

@router.callback_query(F.data == "admin_all")
async def show_all_applications(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        from sqlalchemy import select
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
        filter_type = admin_filters.get(callback.from_user.id, "today")
        
        date_filter = datetime.utcnow()
        if filter_type == "today":
            date_filter = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        elif filter_type == "week":
            date_filter = datetime.utcnow() - timedelta(days=7)
        elif filter_type == "month":
            date_filter = datetime.utcnow() - timedelta(days=30)
        else:
            date_filter = datetime(2000, 1, 1)  # –í—Å–µ
        
        query = select(Application).where(
            Application.created_at >= date_filter
        ).order_by(Application.created_at.desc()).limit(20)
        
        result = await session.execute(query)
        applications = result.scalars().all()
        
        if not applications:
            await callback.message.edit_text(
                "üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            )
            return
        
        filter_names = {
            "today": "—Å–µ–≥–æ–¥–Ω—è",
            "week": "–Ω–µ–¥–µ–ª—é",
            "month": "–º–µ—Å—è—Ü",
            "all": "–≤—Å–µ –≤—Ä–µ–º—è"
        }
        
        text = f"üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏ –∑–∞ {filter_names.get(filter_type, '–ø–µ—Ä–∏–æ–¥')}:</b>\n\n"
        
        for app in applications[:15]:
            status_emoji = {
                "pending": "‚è≥",
                "approved": "‚úÖ",
                "rejected": "‚ùå",
                "cancelled": "üö´"
            }.get(app.status, "‚ùì")
            
            text += f"{status_emoji} #{app.id} | ${app.amount} | {app.user_name} | {app.created_at.strftime('%d.%m %H:%M')}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="admin_filters"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_all")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_filters")
async def show_filters(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    current_filter = admin_filters.get(callback.from_user.id, "all")
    
    text = (
        "üîç <b>–§–∏–ª—å—Ç—Ä—ã –∑–∞—è–≤–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:\n"
        f"{'‚úÖ' if current_filter == 'today' else '‚óã'} –°–µ–≥–æ–¥–Ω—è\n"
        f"{'‚úÖ' if current_filter == 'week' else '‚óã'} –ù–µ–¥–µ–ª—è\n"
        f"{'‚úÖ' if current_filter == 'month' else '‚óã'} –ú–µ—Å—è—Ü\n"
        f"{'‚úÖ' if current_filter == 'all' else '‚óã'} –í—Å–µ –≤—Ä–µ–º—è\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_filter_keyboard(current_filter),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_export_sheets")
async def export_to_google_sheets(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç...", show_alert=False)
    
    try:
        from google_sheets_integration import export_applications_to_sheets
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
            from sqlalchemy import select
            query = select(Application).order_by(Application.created_at.desc())
            result = await session.execute(query)
            applications = result.scalars().all()
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
            sheet_url = await export_applications_to_sheets(applications)
            
            text = (
                "‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: {len(applications)}\n"
                f"üìù Google Sheets: <a href='{sheet_url}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n\n"
                "üí° –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=sheet_url)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            
    except ImportError:
        text = (
            "‚ö†Ô∏è <b>Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install gspread oauth2client\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials.json\n"
            "3. –°–º–æ—Ç—Ä–∏—Ç–µ GOOGLE_SHEETS_SETUP.md\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="admin_sheets_help")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
        )


@router.callback_query(F.data == "admin_settings")
async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    logger.info(f"üîß show_settings –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    
    has_rights = await check_admin_rights(callback.from_user.id)
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è {callback.from_user.id}: {has_rights}")
    
    if not has_rights:
        logger.warning(f"üîß –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è {callback.from_user.id}")
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    logger.info(f"üîß –ü—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback")
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    from config import MAX_APPLICATIONS_PER_DAY, RATE_LIMIT_PER_MINUTE, MAX_FILE_SIZE
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
        is_superadmin = await DatabaseManager.is_superadmin(session, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–¥–æ–≤
        stats = await DatabaseManager.get_stats(session, days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins_list = await DatabaseManager.get_all_admins(session)
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "<b>üìã –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>\n"
        f"‚Ä¢ –ó–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å: {MAX_APPLICATIONS_PER_DAY}\n"
        f"‚Ä¢ –ú–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏: {RATE_LIMIT_PER_MINUTE}\n"
        f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {MAX_FILE_SIZE // 1024 // 1024} –ú–ë\n\n"
        "<b>üìä –ö–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ–¥–æ–≤
    if stats.get('codes_remaining'):
        for amount, count in stats['codes_remaining'].items():
            emoji = "üî¥" if count < 3 else "üü°" if count < 5 else "üü¢"
            text += f"{emoji} ${amount} USD ‚Äî {count} —à—Ç.\n"
    else:
        text += "‚Ä¢ –ù–µ—Ç –∫–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    text += "\n<b>üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
    for admin in admins_list:
        role_emoji = "üëë" if admin.role == "superadmin" else "üë§"
        text += f"{role_emoji} {admin.user_id} ({admin.role})\n"
    
    if not admins_list:
        text += "‚Ä¢ –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
    
    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_sheets")
        ]
    ]
    
    # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if is_superadmin:
        buttons.append([
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")
        ])
        buttons.append([
            InlineKeyboardButton(text="üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏", callback_data="admin_manage_codes"),
            InlineKeyboardButton(text="üí∞ –ù–æ–º–∏–Ω–∞–ª—ã", callback_data="admin_manage_amounts")
        ])
        buttons.append([
            InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payment_settings")
        ])
        buttons.append([
            InlineKeyboardButton(text="üåê –Ø–∑—ã–∫–∏", callback_data="admin_manage_languages"),
            InlineKeyboardButton(text="üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin_security_logs")
        ])
    
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_refresh")
async def refresh_panel(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
    
    async with async_session_maker() as session:
        stats = await DatabaseManager.get_stats(session, days=1)
    
    text = (
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['total']}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['pending']}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['confirmed']}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_approved")
async def show_approved(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        from sqlalchemy import select
        query = select(Application).where(Application.status == "approved").order_by(Application.updated_at.desc()).limit(10)
        result = await session.execute(query)
        applications = result.scalars().all()
    
    if not applications:
        text = "‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    else:
        text = f"‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(applications)}:\n\n"
        
        for app in applications:
            text += (
                f"#{app.id} | üë§ {app.user_name} | "
                f"üí∞ ${app.amount} | üìÖ {app.updated_at.strftime('%d.%m %H:%M')}\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_approved")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_rejected")
async def show_rejected(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    async with async_session_maker() as session:
        from sqlalchemy import select
        query = select(Application).where(Application.status == "rejected").order_by(Application.updated_at.desc()).limit(10)
        result = await session.execute(query)
        applications = result.scalars().all()
    
    if not applications:
        text = "‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    else:
        text = f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(applications)}:\n\n"
        
        for app in applications:
            text += (
                f"#{app.id} | üë§ {app.user_name} | "
                f"üí∞ ${app.amount} | üìÖ {app.updated_at.strftime('%d.%m %H:%M')}\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_rejected")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_search")
async def show_search(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫"""
    if not await check_admin_rights(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123)\n"
        "‚Ä¢ User ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 987654321)\n"
        "‚Ä¢ –õ–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: user123)\n\n"
        "–Ø –Ω–∞–π–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò ====================

@router.callback_query(F.data == "admin_manage_admins")
async def manage_admins(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins_list = await DatabaseManager.get_all_admins(session)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
    
    if admins_list:
        text += "<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        for admin in admins_list:
            role_emoji = "üëë" if admin.role == "superadmin" else "üë§"
            role_name = "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if admin.role == "superadmin" else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            added_date = admin.created_at.strftime('%d.%m.%Y')
            text += f"{role_emoji} <code>{admin.user_id}</code> - {role_name}\n"
            text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n"
            if admin.added_by:
                text += f"   –î–æ–±–∞–≤–∏–ª: {admin.added_by}\n"
            text += "\n"
    else:
        text += "‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n"
    
    text += "\nüí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
    text += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    text += "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove_admin")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "admin_add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
    
    await callback.answer()
    
    await state.set_state(AdminManagementStates.waiting_for_admin_id_to_add)
    
    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "üí° <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å User ID:</b>\n"
        "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
        "2. –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ ID –≤ –ª–æ–≥–∞—Ö –±–æ—Ç–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_admins")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(AdminManagementStates.waiting_for_admin_id_to_add))
async def add_admin_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        try:
            new_admin_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        existing_role = await DatabaseManager.get_admin_role(session, new_admin_id)
        
        if existing_role:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_admin_id}</code> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ({existing_role}).",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await DatabaseManager.add_admin(session, new_admin_id, "admin", user_id)
            
            await message.answer(
                f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ User ID: <code>{new_admin_id}</code>\n"
                f"üìã –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                parse_mode="HTML"
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                await message.bot.send_message(
                    new_admin_id,
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    "–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ {new_admin_id}: {e}")
                await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."
                )
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}")
            await state.clear()

@router.callback_query(F.data == "admin_remove_admin")
async def remove_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins_list = await DatabaseManager.get_all_admins(session)
    
    await callback.answer()
    
    if not admins_list:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]
            ])
        )
        return
    
    await state.set_state(AdminManagementStates.waiting_for_admin_id_to_remove)
    
    text = "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    text += "<b>–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n\n"
    
    for admin in admins_list:
        role_emoji = "üëë" if admin.role == "superadmin" else "üë§"
        role_name = "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if admin.role == "superadmin" else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        text += f"{role_emoji} <code>{admin.user_id}</code> - {role_name}\n"
    
    text += "\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ User ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
    text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_admins")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(AdminManagementStates.waiting_for_admin_id_to_remove))
async def remove_admin_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        try:
            admin_id_to_remove = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_role = await DatabaseManager.get_admin_role(session, admin_id_to_remove)
        
        if not admin_role:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{admin_id_to_remove}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if admin_role == "superadmin":
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
                "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
            )
            await state.clear()
            return
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            success = await DatabaseManager.remove_admin(session, admin_id_to_remove)
            
            if success:
                await message.answer(
                    f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
                    f"üë§ User ID: <code>{admin_id_to_remove}</code>\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
                    parse_mode="HTML"
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                try:
                    await message.bot.send_message(
                        admin_id_to_remove,
                        "‚ö†Ô∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                        "–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ {admin_id_to_remove}: {e}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            await state.clear()

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ê–ú–ò –ê–ö–¢–ò–í–ê–¶–ò–ò ====================

@router.callback_query(F.data == "admin_manage_codes")
async def manage_codes_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–¥–æ–≤
        codes = await DatabaseManager.get_all_codes(session)
        unused_codes = [c for c in codes if not c.is_used]
        used_codes = [c for c in codes if c.is_used]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–∞–º
        codes_by_amount = {}
        for code in unused_codes:
            amount = float(code.amount)
            if amount not in codes_by_amount:
                codes_by_amount[amount] = 0
            codes_by_amount[amount] += 1
    
    text = (
        "üéüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–¥–æ–≤: {len(codes)}\n"
        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {len(unused_codes)}\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(used_codes)}\n\n"
        "<b>üí∞ –ü–æ –Ω–æ–º–∏–Ω–∞–ª–∞–º (–¥–æ—Å—Ç—É–ø–Ω–æ):</b>\n"
    )
    
    for amount in sorted(codes_by_amount.keys()):
        emoji = "üî¥" if codes_by_amount[amount] < 3 else "üü°" if codes_by_amount[amount] < 5 else "üü¢"
        text += f"{emoji} ${int(amount)} USD ‚Äî {codes_by_amount[amount]} —à—Ç.\n"
    
    if not codes_by_amount:
        text += "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤!\n"
    
    text += "\nüí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
    text += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
    text += "‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥—ã –∏–∑ CSV —Ñ–∞–π–ª–∞\n"
    text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–¥—ã\n"
    text += "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–æ–¥\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="codes_add_single"),
            InlineKeyboardButton(text="üìÑ –ò–º–ø–æ—Ä—Ç CSV", callback_data="codes_import_csv")
        ],
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–¥—ã", callback_data="codes_view_all"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–¥", callback_data="codes_delete")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "codes_add_single")
async def add_single_code_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
    
    await callback.answer()
    await state.set_state(CodesManagementStates.waiting_for_code_to_add)
    
    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞ (–ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞).\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ ABC123-XYZ789\n"
        "‚Ä¢ PROMO2024\n"
        "‚Ä¢ 123456789\n\n"
        "‚ö†Ô∏è –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_codes")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(CodesManagementStates.waiting_for_code_to_add))
async def add_single_code_value(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        code_value = message.text.strip()
        
        if len(code_value) < 3:
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        existing = await DatabaseManager.get_code_by_value(session, code_value)
        if existing:
            await message.answer(
                f"‚ùå –ö–æ–¥ <code>{code_value}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ!",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—É–º–º—ã
        await state.update_data(code_value=code_value)
        await state.set_state(CodesManagementStates.waiting_for_amount_for_code)
        
        await message.answer(
            f"‚úÖ –ö–æ–¥: <code>{code_value}</code>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª (—Å—É–º–º—É) –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> 10, 25, 50, 100\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="HTML"
        )

@router.message(StateFilter(CodesManagementStates.waiting_for_amount_for_code))
async def add_single_code_amount(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        try:
            amount = float(message.text.strip().replace(",", "."))
            
            if amount <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
                return
            
            if amount > 10000:
                await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 USD")
                return
            
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞
        data = await state.get_data()
        code_value = data.get("code_value")
        
        if not code_value:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await DatabaseManager.add_activation_code(session, code_value, amount)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session,
                user_id,
                "add_code",
                details=f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ {code_value} –Ω–∞ —Å—É–º–º—É ${amount}"
            )
            
            await message.answer(
                f"‚úÖ <b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üéüÔ∏è <b>–ö–æ–¥:</b> <code>{code_value}</code>\n"
                f"üí∞ <b>–ù–æ–º–∏–Ω–∞–ª:</b> ${amount} USD\n\n"
                f"–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                parse_mode="HTML"
            )
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}")
            await state.clear()

@router.callback_query(F.data == "codes_import_csv")
async def import_codes_csv_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–¥–æ–≤ –∏–∑ CSV"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
    
    await callback.answer()
    await state.set_state(CodesManagementStates.waiting_for_csv_file)
    
    text = (
        "üìÑ <b>–ò–º–ø–æ—Ä—Ç –∫–æ–¥–æ–≤ –∏–∑ CSV</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–∫–æ–¥,—Å—É–º–º–∞</code>\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞:</b>\n"
        "<code>ABC123,10\n"
        "XYZ789,25\n"
        "PROMO2024,50</code>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π\n"
        "‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_codes")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(CodesManagementStates.waiting_for_csv_file))
async def import_codes_csv_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
        if not message.document:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        filename = message.document.file_name
        if not filename.lower().endswith('.csv'):
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv")
            return
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            import tempfile
            import csv
            import os
            
            file_info = await message.bot.get_file(message.document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w+b', delete=False, suffix='.csv') as tmp_file:
                tmp_path = tmp_file.name
                await message.bot.download(file=message.document.file_id, destination=tmp_path)
            
            # –ß–∏—Ç–∞–µ–º CSV
            codes_data = []
            with open(tmp_path, 'r', encoding='utf-8') as f:
                reader = csv.reader(f)
                next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                
                for row in reader:
                    if len(row) >= 2:
                        code_value = row[0].strip()
                        try:
                            amount = float(row[1].strip().replace(",", "."))
                            codes_data.append((code_value, amount))
                        except ValueError:
                            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º–æ–π: {row}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_path)
            
            if not codes_data:
                await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                await state.clear()
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥—ã
            result = await DatabaseManager.import_codes_from_list(session, codes_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session,
                user_id,
                "import_codes",
                details=f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {result['added']} –∫–æ–¥–æ–≤ –∏–∑ CSV"
            )
            
            text = (
                f"‚úÖ <b>–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: <b>{result['added']}</b>\n"
                f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {result['skipped']}\n"
            )
            
            if result['errors']:
                text += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏:</b>\n"
                for error in result['errors'][:5]:
                    text += f"‚Ä¢ {error}\n"
                if len(result['errors']) > 5:
                    text += f"‚Ä¢ ... –∏ –µ—â–µ {len(result['errors']) - 5}\n"
            
            await message.answer(text, parse_mode="HTML")
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
            await state.clear()

@router.callback_query(F.data == "codes_view_all")
async def view_all_codes(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–¥–æ–≤"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        await callback.answer()
        
        codes = await DatabaseManager.get_all_codes(session)
    
    if not codes:
        text = "üìã <b>–ö–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_codes")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–∞–º
    codes_by_amount = {}
    for code in codes:
        amount = float(code.amount)
        if amount not in codes_by_amount:
            codes_by_amount[amount] = []
        codes_by_amount[amount].append(code)
    
    text = f"üìã <b>–í—Å–µ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ({len(codes)} —à—Ç.)</b>\n\n"
    
    for amount in sorted(codes_by_amount.keys()):
        codes_list = codes_by_amount[amount]
        unused = [c for c in codes_list if not c.is_used]
        used = [c for c in codes_list if c.is_used]
        
        text += f"üí∞ <b>${int(amount)} USD</b> ({len(unused)} –¥–æ—Å—Ç—É–ø–Ω–æ / {len(used)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤
        for code in unused[:5]:
            text += f"  üü¢ <code>{code.code_value}</code> (ID: {code.id})\n"
        
        if len(unused) > 5:
            text += f"  ... –∏ –µ—â–µ {len(unused) - 5}\n"
        
        text += "\n"
    
    if len(text) > 4000:
        text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_codes")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "codes_delete")
async def delete_code_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    user_id = callback.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        codes = await DatabaseManager.get_all_codes(session, only_unused=True)
    
    await callback.answer()
    
    if not codes:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_codes")]
            ])
        )
        return
    
    await state.set_state(CodesManagementStates.waiting_for_code_id_to_delete)
    
    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
    text += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã:</b>\n\n"
    
    for code in codes[:20]:
        text += f"‚Ä¢ ID: {code.id} | <code>{code.code_value}</code> | ${code.amount}\n"
    
    if len(codes) > 20:
        text += f"\n... –∏ –µ—â–µ {len(codes) - 20} –∫–æ–¥–æ–≤\n"
    
    text += "\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_codes")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(StateFilter(CodesManagementStates.waiting_for_code_id_to_delete))
async def delete_code_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    user_id = message.from_user.id
    
    async with async_session_maker() as session:
        is_superadmin = await DatabaseManager.is_superadmin(session, user_id)
        
        if not is_superadmin:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()
            return
        
        try:
            code_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        query = select(ActivationCode).where(ActivationCode.id == code_id)
        result = await session.execute(query)
        code = result.scalar_one_or_none()
        
        if not code:
            await message.answer(f"‚ùå –ö–æ–¥ —Å ID {code_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        if code.is_used:
            await message.answer(
                f"‚ùå –ö–æ–¥ <code>{code.code_value}</code> —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω!",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–¥
        success = await DatabaseManager.delete_activation_code(session, code_id)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await DatabaseManager.log_admin_action(
                session,
                user_id,
                "delete_code",
                target_id=code_id,
                details=f"–£–¥–∞–ª–µ–Ω –∫–æ–¥ {code.code_value} –Ω–∞ —Å—É–º–º—É ${code.amount}"
            )
            
            await message.answer(
                f"‚úÖ <b>–ö–æ–¥ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üóëÔ∏è ID: {code_id}\n"
                f"üéüÔ∏è –ö–æ–¥: <code>{code.code_value}</code>\n"
                f"üí∞ –ù–æ–º–∏–Ω–∞–ª: ${code.amount} USD",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞.")
        
        await state.clear()
